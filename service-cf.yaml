Parameters:

  ECSCluster:
    Type: String
  VpcId:
    Type: String
  Path:
    Type: String
  ALBListener:
    Type: String
  Priority:
    Type: Number
  DesiredCount:
    Type: Number
  ContainerMemorySize:
    Type: Number
  ContainerPort:
    Type: Number

  # ECR Repo name
  ECRRepository:
    Type: String
  ECRImageTag:
    Type: String

Resources:
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  TaskDefinitionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

#### your micro service
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      Role: !Ref ECSServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      PlacementStrategies:
        - Type: "spread"
          Field: "attribute:ecs.availability-zone"
      LoadBalancers:
        - ContainerName: !Sub ${ECRRepository}
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ECRRepository}
      TaskRoleArn: !Ref TaskDefinitionServiceRole
      ContainerDefinitions:
        - Name: !Sub ${ECRRepository}
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:${ECRImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub ${AWS::Region}
              awslogs-group: !Ref ECSCluster
              # awslogs-stream-prefix: !Sub ${ECRImageTag}-${ECRRepository}
              awslogs-stream-prefix: !Sub ${ECRImageTag}
          Essential: true
          Memory: !Ref ContainerMemorySize
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: AWS_Region
              Value: !Sub ${AWS::Region}

  TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
          VpcId: !Ref VpcId
          Port: 80
          Protocol: HTTP
          Matcher:
              HttpCode: 200-299
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: "/actuator/health/"
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 5
          HealthyThresholdCount: 2
  ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
          ListenerArn: !Ref ALBListener
          Priority: !Ref Priority
          Conditions:
              - Field: path-pattern
                Values:
                  - !Ref Path
          Actions:
              - TargetGroupArn: !Ref TargetGroup
                Type: forward


Outputs:
  EcsServiceName:
    Description: ECS Service Name
    Value: !GetAtt Service.Name